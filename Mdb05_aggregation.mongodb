///==================================================================================
//                                  AGGREGATION
//==================================================================================
// 1) Aggregation, dokumanlardaki verilerin islenmesi ve hesaplanan 
//    sonuclarin donmesini saglayan islemlerdir. 
//
// 2) Aggregation islemleri, farklı dokumanlardaki degerleri gruplandirabilir.
//
// 3) Bu gruplanan veriler uzerinde cesitli islemlerin gereceklestirelerek tek 
//    bir sonuc degerinin donmesi saglanabilir.
//
// 4) MongoDB, 3 farklı yontem ile aggregation gerceklestirmeye izin verir.
//     A) aggregation pipeline (toplama boru hattı) --> best practice...
//     B) map-reduce function (map indirgeme)
//     C) single-purpose aggregation (tek-amaç toplama) 
//
// 5) Aggregiation, SQL'deki Join islemlerine benzetilebilir. 
//
//     SQL         MONGO
//----------------------
//     WHERE       $match
//     GROUP BY    $group
//     HAVING	   $match
//     SELECT	   $project
//     ORDER BY    $sort
//     LIMIT	   $limit
//     SUM()	   $sum
//     COUNT()	   $count, $sum
//     JOIN	   $lookup
//     MERGE 	   $merge (MongoDB 4.2 ve sonrasi)
// aggregation (sum,max,avg vs atomic operator) yaparken bi field (column) kullanacaksak syntax -> "$urunAdi" 

//==================================================================================
//                          AGGREGATION PIPELINE
//==================================================================================
// SYNTAX
// 
//   pipeline = [
//   { $match : { … },
//   { $group : { … },
//   { $sort : { … },
//      ...
//   ]
//   db.collectionName.aggregate({pipeline}, {options})
//
//  $match() –> Verileri secerken flitrelemek icin
//  $group({_id : "$field"}) - >islenen verilerin gruplanmasi icin 
//  $sort() -> Sonuclarin siralanmasi icin


use("okul")
db.ogrenciler.insertMany([
{"isim": "Tarik ", "yas":57, "sube": "A", "not":97, "dersler":["fizik", "mat"]}, 
{"isim": "Selim", "yas":37, "sube": "A","not":77,},
{"isim": "Galip", "yas":37, "sube": "A","not":34, "dersler":["ingilizce"]},
{"isim": "Teslime", "yas":24, "sube": "A","not":88, "dersler":["mat","fizik","kimya"]}
{"isim": "Nalan", "yas":67, "sube": "B","not":55, "dersler":["fizik", "ingilizce"]},
{"isim": "Burhan", "yas":21, "sube": "B","not":43, "dersler":["fizik", "mat"]},
{"isim": "Niyazi", "yas":40, "sube": "B","not":99, "dersler":["ingilizce"]}]);


///---------------------------------------------------------------------------------
// QUERY 01 ...  yasi 30'dan buyuk olan ogrencileri sorgulayiniz.   
//---------------------------------------------------------------------------------
use("okul")
db.ogrenciler.aggregate({$match:{yas:{$gt:30}}})
//db.ogrenciler.find({yas:{$gt:30}})

//--------------------------------------------------------------------------------
// QUERY 02 ...  dersler i sadece ingilizce ve yasi 70'dan kucuk olan ogrencileri sorgulayiniz.   
//---------------------------------------------------------------------------------
use("okul")
db.ogrenciler.aggregate({$match:{dersler:["ingilizce"],yas:{$lt:70}}})

//---------------------------------------------------------------------------------
// QUERY 03 ...  B-subesindeki ogrenci sayisini hesaplayan query create ediniz.
//               NOT: SAYMAK icin  $match icerisinde $count metodu kullanilabilir. 
//---------------------------------------------------------------------------------
use("okul")
db.ogrenciler.aggregate(
                        {$match:{sube:"B"}},//match:eşleştirme ,fitreleme
                        {$count:" "}//saydırıldı
                        )

//---------------------------------------------------------------------------------
// NOT: Group isleminde degiskenlerin onune $ isareti konulmalidir.
//      id den sonra dersler, not vs de olabilir, 
//      $group:{_id:"$sube"}} -> şubeye göre grupla her grub yeni bir json obj.
    
//---------------------------------------------------------------------------------
// QUERY 04 ...  Tum subelerdeki toplam ogrenci sayisini hesaplayan query create ediniz.
//---------------------------------------------------------------------------------
//db.ogrenciler.aggregate({$group:{_id:“$sube”}.{$count:“”})-->subeye göre grublanan dataları count eder grup içine girmez
 //db.ogrenciler.aggregate ({$group:{_id: “$sube”}},{$count:“toplam öğrenci”
         //==>bu yanlış yazım, subeleri sayar, cevap olarak 2 yazdırır, 2 sube var der
//sum:1 mesela A daki öğrencileri 1 er 1 er sayıp toplar. burada 1 yerine $not (not lara göre topla) yazarsak alttaki soru gibi A daki notları kendi arasında B dekileri kendi arasında not ları toplar. count sum max gibi metodlarda ön bilgi şart

//---------------------------------------------------------------------------------
// QUERY 05 ...  Tum subelerdeki toplam ogrenci sayilarini ve her subedeki maks notu hesaplayan  query create ediniz.
//----------------------------------------------------------------------------------
use(“okul”)
db.ogrenciler.aggregate({$group:{_id:“$sube”,topOgcSayisi:{$sum:1},basarılı:{$max:“$not”}}})

//---------------------------------------------------------------------------------
// QUERY 06 ...  yasi 30'dan kucuk olanlarin subelere gore not ortalamalarini hesaplayan query create ediniz.
//---------------------------------------------------------------------------------


//---------------------------------------------------------------------------------
// QUERY 07 ...  inglizce dersini alanlarin subelere gore sayilarinı hesaplayan query create ediniz.
//               (ingilizce yanında başka derste olabilir)
//---------------------------------------------------------------------------------
                 


//---------------------------------------------------------------------------------
// QUERY 08 ... fizik veya matematik alanlarin subelere gore sayilari hesaplayan query create ediniz.
//---------------------------------------------------------------------------------


//---------------------------------------------------------------------------------
// QUERY 09 ...  sadece Fizik ve Mat dersini alanlarin subelere gore sayilari hesaplayan query create ediniz.
//---------------------------------------------------------------------------------


//---------------------------------------------------------------------------------
// QUERY 10 ...  A subesindeki ogrencileri yasa gore azalan sirada, nota gore yukselen sirada
//               siralayiniz.
//---------------------------------------------------------------------------------


